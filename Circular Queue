#include<iostream>
using namespace std;

class circular_Queue
{
    int front ,rear;
    public: 
        circular_Queue()
        {
             front=rear=-1;
        }

    int enqueue(int[],int,int);
    int dequeue(int[],int);
    int isfull(int[],int);
    int isempty(int[],int);
    void display(int[],int);
};


int circular_Queue::enqueue(int queue[],int item,int n)
{
    if(front==-1)
    {
        front++;
    }
    rear=(rear+1)%n;
    queue[rear]=item;
    
    return 0;
}

int circular_Queue::dequeue(int queue[],int n)
{
    int del;
    del=queue[front];
    

    if(front == rear){
    	front=-1;
    	rear=-1;
	}
	
	else{
		front=(front+1)%n;
	}
	
	return del;
}

void circular_Queue::display(int queue[],int n){
    int i;   
    for( i=front ;i!=rear;i=(i+1)%n){
        cout<<queue[i]<<"\t";
    }
    cout<<queue[i];
}

int circular_Queue::isfull(int queue[],int n){

    if ((rear+1)%n==front){
        return 0; 
    }
    else{
        return -1;
    }
}

int circular_Queue::isempty(int queue[],int n){

    if( (front==-1) && (rear==-1 )){
        return 0;
    }
    else{
        return -1;
    }
}


int main(){
	
    int n,element,del,a,b,c,d;
    int queue[20];
    circular_Queue Q;
    cout<<"Enter no. of elements:";
    cin>>n;

    do{

        cout<<"\nEnter your choice:"<<endl;
        cout<<"1.Insert elements \n2.Display  \n3.Delete element \n4.Check Queue is full or empty \n5.Exit ";
        cin>>d;

    switch(d){

        case(1):
          
          cout<<"Enter the elements to be inserted:";

             cin>>element;
             Q.enqueue(queue,element,n);
        

          break;

        case(2):
           cout<<"\nEntered elements are:"<<"\t";
           Q.display(queue,n);
           break;

        case(3):
        	
            b=Q.isempty(queue,n);
            if(b==0){
               cout<<"\nQueue is empty"<<endl;
            }
            
			else{
			  del=Q.dequeue(queue,n);
              cout<<"\nDeleted element is:"<<endl;
              cout<<del<<endl;
            }
            break;

        case(4):
           a=Q.isfull(queue,n);
           b=Q.isempty(queue,n);
           
           if(a==0){
               cout<<"\nQueue is full"<<endl;
           }
           
           else if(b==0){
               cout<<"\nQueue is empty"<<endl;
           }
           
           else{
           	   cout<<"\nQueue is neither empty nor full"<<endl;
		   }
           break;

        case(5):
           exit;

        default:
            cout<<"No such case"<<endl;

    }

    }while(d!=5);

    return 0;
}
